service: translations

frameworkVersion: '2'

custom:
  mason:
    owner: "DevCloudPlatformUsersService@genesys.com"
    role: ${self:service}
    options:
      lambda_logger_version: v2
  bucket_name: serverless-local-deploys

  alerts:
    nameTemplate: $[functionName]-$[metricName]-Alarm
    definitions: # these defaults are merged with your definitions
      functionErrors:
        okActions:
          - critical
        alarmActions:
          - critical
      functionThrottles:
        okActions:
          - critical
        alarmActions:
          - critical
      functionDuration:
        threshold: 6000 # Reducing threshold for api routes
        okActions:
          - critical
        alarmActions:
          - critical
    topics:
      critical:
        ok:
          topic: ${self:custom.mason.role}-${opt:stage, 'dev'}-critical-alerts-ok
          notifications:
            - protocol: https
              endpoint:
                Fn::Join:
                  - ''
                  - - https://events.pagerduty.com/integration/
                    - Ref: Terraform.pagerduty_cloudwatch_key
                    - /enqueue
        alarm:
          topic: ${self:custom.mason.role}-${opt:stage, 'dev'}-critical-alerts-alarm
          notifications:
            - protocol: https
              endpoint:
                Fn::Join:
                  - ''
                  - - https://events.pagerduty.com/integration/
                    - Ref: Terraform.pagerduty_cloudwatch_key
                    - /enqueue
    alarms:
      - functionErrors
      - functionThrottles
      - functionDuration

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221
  environment:
    ENVIRONMENT: "${mason:name}"
    HABITAT: "${mason:name}" # This is actually habitat name
    NEW_RELIC_APP_NAME: "${self:service}"
    NEW_RELIC_NO_CONFIG_FILE: true
    NEW_RELIC_ACCOUNT_ID: ${mason:newrelic.accountId}
    NEW_RELIC_TRUSTED_ACCOUNT_KEY: ${mason:newrelic.trustedAccountKey}
    NEW_RELIC_MONITOR_MODE: true
    NEW_RELIC_SERVERLESS_MODE_ENABLED: true
    NEW_RELIC_DISTRIBUTED_TRACING_ENABLED: true
    FIPS_ENABLED:
      Ref: Hyperion.compliance.fipsRequired
    DDBTABLE:
      Ref: TranslationsTable
  iam:
    role:
      statements:
        - Sid: SqsPublish
          Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt:
              - TranslationsOrgQueue
              - Arn
        - Sid: DdbWrite
          Effect: Allow
          Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Query
          Resource:
            - Fn::GetAtt:
              - TranslationsTable
              - Arn
        - Sid: OrgPurged
          Effect: Allow
          Action:
            - sqs:*
          Resource:
            - Fn::GetAtt:
                - OrganizationPurgedDLQ
                - Arn

  vpc:
    securityGroupIds:
      - Ref: LambdaAlbSecurityGroup
    subnetIds:
      Ref: VPCSUBNET

  deploymentBucket:
    name: '${self:custom.bucket_name}'
    serverSideEncryption: AES256

package:
  exclude:
    - ./**
  include:
    - ./directory/*.json
    - ./bin/**
    - .git/**

functions:
  getOrgTranslations:
    handler: bin/getOrgTranslations
    timeout: 15
    reservedConcurrency: 50
    events:
      - alb:
          listenerArn:
            Ref: LambdaListener
          priority: 10
          conditions:
            path:
              - /organizations/?*/translations/?*
              - /builtin/?*
            method:
              - GET
  getOrgLanguages:
    handler: bin/getOrgLanguages
    timeout: 15
    reservedConcurrency: 50
    events:
      - alb:
          listenerArn:
            Ref: LambdaListener
          priority: 15
          conditions:
            path: /organizations/?*/availableTranslations
            method:
              - GET
  getOrgIds:
    handler: bin/getOrgIds
    timeout: 600
    reservedConcurrency: 5
    environment: &defaultEnvironment
      SQSQUEUEURL: !Ref TranslationsOrgQueue
    alarms:
      - name: functionDuration
        threshold: 300000 #5min
  importTranslations:
    handler: bin/importTranslations
    timeout: 60
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TranslationsOrgQueue
              - Arn
    alarms:
      - name: functionThrottles
        enabled: false
  importBuiltins:
    handler: bin/importBuiltins
    timeout: 30
    reservedConcurrency: 1
  postOrgTranslations:
    handler: bin/postOrgTranslations
    timeout: 15
    reservedConcurrency: 5
    events:
      - alb:
          listenerArn:
            Ref: LambdaListener
          priority: 40
          conditions:
            path:
              - /organizations/?*/translations/?*
              - /builtin/?*
            method:
              - POST
  purgeOrgTranslations:
    handler: bin/purgeOrgTranslations
    timeout: 15
    reservedConcurrency: 50
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - 'arn:aws:sns'
                - Ref: REGION
                - MasonFn::HyperionFamilyGet:
                    Family: core
                    Path:
                      - accountData
                      - accountId
                - 'surtr-kafka-OrganizationPurged'
          topicName: surtr-kafka-OrganizationPurged
          redrivePolicy:
            deadLetterTargetRef: OrganizationPurgedDLQ

resources:
  Description: Translations service stack
  Resources:
    SNSTopicPagerDuty:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint:
              Fn::Join:
                - ''
                - - https://events.pagerduty.com/integration/
                  - Ref: Terraform.pagerduty_cloudwatch_key
                  - /enqueue
            Protocol: https
    TranslationsOrgQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName:  !Join [ '-' , [ !Ref AWS::StackName, 'org-queue' ] ]
        KmsMasterKeyId: alias/aws/sqs
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 360
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt TranslationsOrgQueueDLQ.Arn
          maxReceiveCount: 5
    TranslationsOrgQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: !Join [ '-' , [ !Ref AWS::StackName,  'org-queue-dlq' ] ]
        KmsMasterKeyId: alias/aws/sqs
        MessageRetentionPeriod: 86400        
    TranslationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref AWS::StackName
        AttributeDefinitions:
          - AttributeName: OrgId
            AttributeType: S
          - AttributeName: Lang
            AttributeType: S
        KeySchema:
          - AttributeName: OrgId
            KeyType: HASH
          - AttributeName: Lang
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    LambdaAlb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internal
        Type: application
        SecurityGroups:
          - Ref: LambdaAlbSecurityGroup
        Subnets:
          Ref: VPCSUBNET
        LoadBalancerAttributes:
          - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value:
              Ref: ELBLOGBUCKET
          - Key: access_logs.s3.prefix
            Value:
              Fn::Join:
                - "."
                - - Ref: ENVIRONMENT
                  - Ref: ROLE
    LambdaAlbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: ALB SecurityGroup
        VpcId: 
          Ref: VPCID
        SecurityGroupIngress:
          CidrIp:
            Ref: VpcCidr
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        SecurityGroupEgress:
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
    TranslationsALBResponse4xx:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Translations ALB increased 4xx responses
        MetricName: HTTPCode_ELB_4XX_Count
        Namespace: AWS/ApplicationELB
        Statistic: Sum
        Period: '60'
        EvaluationPeriods: '1'
        ComparisonOperator: GreaterThanThreshold
        Threshold: '100'  # more than 100 4xx responses in the last minute
        Unit: Count
        AlarmActions:
          - Ref: SNSTopicPagerDuty
        OKActions:
          - Ref: SNSTopicPagerDuty
        InsufficientDataActions:
          - Ref: SNSTopicPagerDuty
        TreatMissingData: notBreaching # This is effectively 0 if the ALB isn't being used.
        Dimensions:
          - Name: LoadBalancer
            Value:
              Fn::GetAtt:
                - LambdaAlb
                - LoadBalancerFullName
    TranslationsTargetResponse4xx:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Translations increased 4xx responses
        MetricName: HTTPCode_Target_4XX_Count
        Namespace: AWS/ApplicationELB
        Statistic: Sum
        Period: '60'
        EvaluationPeriods: '1'
        ComparisonOperator: GreaterThanThreshold
        Threshold: '100'  # more than 100 4xx target responses in the last minute
        Unit: Count
        AlarmActions:
          - Ref: SNSTopicPagerDuty
        OKActions:
          - Ref: SNSTopicPagerDuty
        InsufficientDataActions:
          - Ref: SNSTopicPagerDuty
        TreatMissingData: notBreaching # This is effectively 0 if the ALB isn't being used.
        Dimensions:
          - Name: LoadBalancer
            Value:
              Fn::GetAtt:
                - LambdaAlb
                - LoadBalancerFullName
    TranslationsALBResponse5xx:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Translations ALB increased 5xx responses
        MetricName: HTTPCode_ELB_5XX_Count
        Namespace: AWS/ApplicationELB
        Statistic: Sum
        Period: '60'
        EvaluationPeriods: '1'
        ComparisonOperator: GreaterThanThreshold
        Threshold: '10' # more than 10 5xx alb responses in the last minute
        Unit: Count
        AlarmActions:
          - Ref: SNSTopicPagerDuty
        OKActions:
          - Ref: SNSTopicPagerDuty
        InsufficientDataActions:
         - Ref: SNSTopicPagerDuty
        TreatMissingData: notBreaching # This is effectively 0 if the ALB isn't being used.
        Dimensions:
          - Name: LoadBalancer
            Value:
              Fn::GetAtt:
                - LambdaAlb
                - LoadBalancerFullName
    TranslationsTargetResponse5xx:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: Translations increased 5xx responses
        MetricName: HTTPCode_Target_5XX_Count
        Namespace: AWS/ApplicationELB
        Statistic: Sum
        Period: '60'
        EvaluationPeriods: '1'
        ComparisonOperator: GreaterThanThreshold
        Threshold: '10'  # more than 10 5xx  responses in the last minute
        Unit: Count
        AlarmActions:
          - Ref: SNSTopicPagerDuty
        OKActions:
          - Ref: SNSTopicPagerDuty
        InsufficientDataActions:
          - Ref: SNSTopicPagerDuty
        TreatMissingData: notBreaching # This is effectively 0 if the ALB isn't being used.
        Dimensions:
          - Name: LoadBalancer
            Value:
              Fn::GetAtt:
                - LambdaAlb
                - LoadBalancerFullName
    LambdaListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Certificates:
          - CertificateArn: '${mason:pipeline.sslCertArn}'
        SslPolicy:
          Ref: ELBSecurityPolicy
        LoadBalancerArn:
          Ref: LambdaAlb
        Port: 443
        Protocol: HTTPS
        DefaultActions:
          - FixedResponseConfig:
              StatusCode: 404
            Type: fixed-response
    LambdaDNS:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget: &defaultDnsAliasTarget
          DNSName:
            Fn::Join:
              - '.'
              - - Fn::GetAtt:
                    - LambdaAlb
                    - DNSName
          EvaluateTargetHealth: false
          HostedZoneId: '${mason:aws.elbHostedZoneId}'
        HostedZoneId: '${mason:networks.default.pureCloudPrvHostedZoneId}'
        Name:
          Fn::Join:
            - '.'
            - - Ref: AWS::StackName
              - '${mason:domains.pureCloudPrvDomain}'
        Type: A
    OrganizationPurgedDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: !Join ['-', [ !Ref AWS::StackName, 'OrganizationPurgedDLQ' ]]
        KmsMasterKeyId: 'alias/aws/sqs'
plugins:
  - serverless-mason
  - serverless-plugin-aws-alerts
